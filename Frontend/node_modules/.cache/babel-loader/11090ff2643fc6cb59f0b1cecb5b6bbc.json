{"ast":null,"code":"var parse = require('../parse/index.js');\n\n/**\n * @category Common Helpers\n * @summary Return a date from the array closest to the given date.\n *\n * @description\n * Return a date from the array closest to the given date.\n *\n * @param {Date|String|Number} dateToCompare - the date to compare with\n * @param {Date[]|String[]|Number[]} datesArray - the array to search\n * @returns {Date} the date from the array closest to the given date\n * @throws {TypeError} the second argument must be an instance of Array\n *\n * @example\n * // Which date is closer to 6 September 2015: 1 January 2000 or 1 January 2030?\n * var dateToCompare = new Date(2015, 8, 6)\n * var result = closestTo(dateToCompare, [\n *   new Date(2000, 0, 1),\n *   new Date(2030, 0, 1)\n * ])\n * //=> Tue Jan 01 2030 00:00:00\n */\nfunction closestTo(dirtyDateToCompare, dirtyDatesArray) {\n  if (!(dirtyDatesArray instanceof Array)) {\n    throw new TypeError(toString.call(dirtyDatesArray) + ' is not an instance of Array');\n  }\n  var dateToCompare = parse(dirtyDateToCompare);\n  var timeToCompare = dateToCompare.getTime();\n  var result;\n  var minDistance;\n  dirtyDatesArray.forEach(function (dirtyDate) {\n    var currentDate = parse(dirtyDate);\n    var distance = Math.abs(timeToCompare - currentDate.getTime());\n    if (result === undefined || distance < minDistance) {\n      result = currentDate;\n      minDistance = distance;\n    }\n  });\n  return result;\n}\nmodule.exports = closestTo;","map":{"version":3,"names":["parse","require","closestTo","dirtyDateToCompare","dirtyDatesArray","Array","TypeError","toString","call","dateToCompare","timeToCompare","getTime","result","minDistance","forEach","dirtyDate","currentDate","distance","Math","abs","undefined","module","exports"],"sources":["/Users/hore.11/github/movies/Frontend/node_modules/date-fns/closest_to/index.js"],"sourcesContent":["var parse = require('../parse/index.js')\n\n/**\n * @category Common Helpers\n * @summary Return a date from the array closest to the given date.\n *\n * @description\n * Return a date from the array closest to the given date.\n *\n * @param {Date|String|Number} dateToCompare - the date to compare with\n * @param {Date[]|String[]|Number[]} datesArray - the array to search\n * @returns {Date} the date from the array closest to the given date\n * @throws {TypeError} the second argument must be an instance of Array\n *\n * @example\n * // Which date is closer to 6 September 2015: 1 January 2000 or 1 January 2030?\n * var dateToCompare = new Date(2015, 8, 6)\n * var result = closestTo(dateToCompare, [\n *   new Date(2000, 0, 1),\n *   new Date(2030, 0, 1)\n * ])\n * //=> Tue Jan 01 2030 00:00:00\n */\nfunction closestTo (dirtyDateToCompare, dirtyDatesArray) {\n  if (!(dirtyDatesArray instanceof Array)) {\n    throw new TypeError(toString.call(dirtyDatesArray) + ' is not an instance of Array')\n  }\n\n  var dateToCompare = parse(dirtyDateToCompare)\n  var timeToCompare = dateToCompare.getTime()\n\n  var result\n  var minDistance\n\n  dirtyDatesArray.forEach(function (dirtyDate) {\n    var currentDate = parse(dirtyDate)\n    var distance = Math.abs(timeToCompare - currentDate.getTime())\n    if (result === undefined || distance < minDistance) {\n      result = currentDate\n      minDistance = distance\n    }\n  })\n\n  return result\n}\n\nmodule.exports = closestTo\n"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,mBAAmB,CAAC;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,SAASA,CAAEC,kBAAkB,EAAEC,eAAe,EAAE;EACvD,IAAI,EAAEA,eAAe,YAAYC,KAAK,CAAC,EAAE;IACvC,MAAM,IAAIC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACJ,eAAe,CAAC,GAAG,8BAA8B,CAAC;EACtF;EAEA,IAAIK,aAAa,GAAGT,KAAK,CAACG,kBAAkB,CAAC;EAC7C,IAAIO,aAAa,GAAGD,aAAa,CAACE,OAAO,EAAE;EAE3C,IAAIC,MAAM;EACV,IAAIC,WAAW;EAEfT,eAAe,CAACU,OAAO,CAAC,UAAUC,SAAS,EAAE;IAC3C,IAAIC,WAAW,GAAGhB,KAAK,CAACe,SAAS,CAAC;IAClC,IAAIE,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAACT,aAAa,GAAGM,WAAW,CAACL,OAAO,EAAE,CAAC;IAC9D,IAAIC,MAAM,KAAKQ,SAAS,IAAIH,QAAQ,GAAGJ,WAAW,EAAE;MAClDD,MAAM,GAAGI,WAAW;MACpBH,WAAW,GAAGI,QAAQ;IACxB;EACF,CAAC,CAAC;EAEF,OAAOL,MAAM;AACf;AAEAS,MAAM,CAACC,OAAO,GAAGpB,SAAS"},"metadata":{},"sourceType":"script"}