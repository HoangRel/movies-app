{"ast":null,"code":"var _jsxFileName = \"/Users/hore.11/github/movies/Frontend/src/pages/browse/MovieList/MovieDetail.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport YouTube from 'react-youtube';\nimport styles from './MovieDetail.module.css';\nimport Ticket from '../../ticket/Ticket';\n\n// hiển thị chi tiết bộ phim\nconst MovieDetail = props => {\n  // false là dùng ảnh, true là dùng video từ youtube\n  const [isMedia, setIsMedia] = useState(false);\n  const [isYoutube, setIsYoutube] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // state này cho việc mở popup thông tin phim lên. vì mặc định image là được dùng từ đầu trước khi kiểm tra xem có thể dùng video hay không. State này để tránh việc render image từ đầu không cần thiết.\n  const [isStart, setIsStart] = useState(false);\n\n  // gọi fetch API\n  useEffect(() => {\n    const fetchMovieDetail = async () => {\n      const token = localStorage.getItem('token');\n      setIsStart(false);\n      // mặc định là dùng ảnh để render\n      setIsMedia(false);\n      setIsLoading(true);\n      try {\n        const response = await fetch(\n        // `https://api.themoviedb.org/3//movie/${props.movieData.id}/videos?api_key=${API_KEY}`\n        `http://localhost:8080/api/movies/video?film_id=${props.movieData.id}`, {\n          method: 'GET',\n          headers: {\n            Authorization: 'Bearer ' + token\n          }\n        });\n\n        // // nếu có lỗi thì thoát\n        // if (!response.ok) {\n        //   return null;\n        // }\n\n        const data = await response.json();\n\n        // nếu không có video nào thì thoát\n        if (data.results.length === 0) {\n          return null;\n        }\n\n        // nếu có video chọn video đầu tiên thõa điều kiện\n        const filterMovie = data.results.find(movie => {\n          if (movie.site === 'YouTube') {\n            switch (movie.type) {\n              case 'Trailer':\n                return movie;\n              case 'Teaser':\n                return movie;\n              default:\n                break;\n            }\n          }\n          return null;\n        });\n        // Nếu đã tìm thấy bộ phim đủ điều kiện.\n        if (filterMovie) {\n          setIsYoutube(filterMovie);\n\n          // dùng video\n          setIsMedia(true);\n        }\n      } catch (err) {\n        return null;\n      } finally {\n        // dù hàm chạy thành công hay không thì vẫn sẽ tắt state Loading & mở popup chi tiết phim\n        // nếu hàm chạy không thành công thì sẽ theo mặc định (render image), nếu thành công tìm thấy video thì render video\n        setIsStart(true);\n        setIsLoading(false);\n      }\n    };\n    fetchMovieDetail();\n  }, [props.movieData.id]);\n  const opts = {\n    // height: \"400\",\n    // width: \"100%\",\n    playerVars: {\n      autoplay: 0\n    }\n  };\n\n  // console.log(props.movieData.id);\n\n  return /*#__PURE__*/React.createElement(\"section\", {\n    className: styles.section,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, \"Book tickets\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, props.movieData.title), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }), props.movieData.date && /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 34\n    }\n  }, \"Release Date: \", props.movieData.date), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, \"Vote: \", props.movieData.vote, \"/10\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, props.movieData.overview)), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, isLoading && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 23\n    }\n  }, \"Loading...\"), isStart && !isMedia && /*#__PURE__*/React.createElement(\"img\", {\n    className: styles.image,\n    src:\n    // dùng Backdrop\n    // nhưng một số bộ phim có link backdrop (bị lỗi?) không có đuôi .jpg nên không thể lấy ảnh về render được. Nên dùng poster thay thế cho số ít trường hợp đó.\n    props.movieData.backdrop.indexOf('.jpg') === -1 ? props.movieData.poster : props.movieData.backdrop,\n    alt: props.movieData.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }), isStart && isMedia && /*#__PURE__*/React.createElement(YouTube, {\n    className: styles.image,\n    videoId: isYoutube.key,\n    opts: opts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  })));\n};\nexport default MovieDetail;","map":{"version":3,"names":["React","useEffect","useState","YouTube","styles","Ticket","MovieDetail","props","isMedia","setIsMedia","isYoutube","setIsYoutube","isLoading","setIsLoading","isStart","setIsStart","fetchMovieDetail","token","localStorage","getItem","response","fetch","movieData","id","method","headers","Authorization","data","json","results","length","filterMovie","find","movie","site","type","err","opts","playerVars","autoplay","createElement","className","section","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","title","date","vote","overview","image","src","backdrop","indexOf","poster","alt","videoId","key"],"sources":["/Users/hore.11/github/movies/Frontend/src/pages/browse/MovieList/MovieDetail.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport YouTube from 'react-youtube';\n\nimport styles from './MovieDetail.module.css';\nimport Ticket from '../../ticket/Ticket';\n\n// hiển thị chi tiết bộ phim\nconst MovieDetail = props => {\n  // false là dùng ảnh, true là dùng video từ youtube\n  const [isMedia, setIsMedia] = useState(false);\n\n  const [isYoutube, setIsYoutube] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // state này cho việc mở popup thông tin phim lên. vì mặc định image là được dùng từ đầu trước khi kiểm tra xem có thể dùng video hay không. State này để tránh việc render image từ đầu không cần thiết.\n  const [isStart, setIsStart] = useState(false);\n\n  // gọi fetch API\n  useEffect(() => {\n    const fetchMovieDetail = async () => {\n      const token = localStorage.getItem('token');\n      setIsStart(false);\n      // mặc định là dùng ảnh để render\n      setIsMedia(false);\n      setIsLoading(true);\n\n      try {\n        const response = await fetch(\n          // `https://api.themoviedb.org/3//movie/${props.movieData.id}/videos?api_key=${API_KEY}`\n          `http://localhost:8080/api/movies/video?film_id=${props.movieData.id}`,\n          {\n            method: 'GET',\n            headers: {\n              Authorization: 'Bearer ' + token,\n            },\n          }\n        );\n\n        // // nếu có lỗi thì thoát\n        // if (!response.ok) {\n        //   return null;\n        // }\n\n        const data = await response.json();\n\n        // nếu không có video nào thì thoát\n        if (data.results.length === 0) {\n          return null;\n        }\n\n        // nếu có video chọn video đầu tiên thõa điều kiện\n        const filterMovie = data.results.find(movie => {\n          if (movie.site === 'YouTube') {\n            switch (movie.type) {\n              case 'Trailer':\n                return movie;\n              case 'Teaser':\n                return movie;\n              default:\n                break;\n            }\n          }\n          return null;\n        });\n        // Nếu đã tìm thấy bộ phim đủ điều kiện.\n        if (filterMovie) {\n          setIsYoutube(filterMovie);\n\n          // dùng video\n          setIsMedia(true);\n        }\n      } catch (err) {\n        return null;\n      } finally {\n        // dù hàm chạy thành công hay không thì vẫn sẽ tắt state Loading & mở popup chi tiết phim\n        // nếu hàm chạy không thành công thì sẽ theo mặc định (render image), nếu thành công tìm thấy video thì render video\n        setIsStart(true);\n        setIsLoading(false);\n      }\n    };\n\n    fetchMovieDetail();\n  }, [props.movieData.id]);\n\n  const opts = {\n    // height: \"400\",\n    // width: \"100%\",\n    playerVars: {\n      autoplay: 0,\n    },\n  };\n\n  // console.log(props.movieData.id);\n\n  return (\n    <section className={styles.section}>\n      {/* <Ticket movieId={props.movieData.id} /> */}\n      <button type='button'>Book tickets</button>\n      <div>\n        <h1>{props.movieData.title}</h1>\n        <hr></hr>\n        {props.movieData.date && <h3>Release Date: {props.movieData.date}</h3>}\n        <h3>Vote: {props.movieData.vote}/10</h3>\n        <p>{props.movieData.overview}</p>\n      </div>\n      <div>\n        {isLoading && <p>Loading...</p>}\n        {isStart && !isMedia && (\n          <img\n            className={styles.image}\n            src={\n              // dùng Backdrop\n              // nhưng một số bộ phim có link backdrop (bị lỗi?) không có đuôi .jpg nên không thể lấy ảnh về render được. Nên dùng poster thay thế cho số ít trường hợp đó.\n              props.movieData.backdrop.indexOf('.jpg') === -1\n                ? props.movieData.poster\n                : props.movieData.backdrop\n            }\n            alt={props.movieData.title}\n          />\n        )}\n        {isStart && isMedia && (\n          <YouTube\n            className={styles.image}\n            videoId={isYoutube.key}\n            opts={opts}\n          />\n        )}\n      </div>\n    </section>\n  );\n};\n\nexport default MovieDetail;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAElD,OAAOC,OAAO,MAAM,eAAe;AAEnC,OAAOC,MAAM,MAAM,0BAA0B;AAC7C,OAAOC,MAAM,MAAM,qBAAqB;;AAExC;AACA,MAAMC,WAAW,GAAGC,KAAK,IAAI;EAC3B;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;;EAEjD;EACA,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;;EAE7C;EACAD,SAAS,CAAC,MAAM;IACd,MAAMe,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3CJ,UAAU,CAAC,KAAK,CAAC;MACjB;MACAN,UAAU,CAAC,KAAK,CAAC;MACjBI,YAAY,CAAC,IAAI,CAAC;MAElB,IAAI;QACF,MAAMO,QAAQ,GAAG,MAAMC,KAAK;QAC1B;QACC,kDAAiDd,KAAK,CAACe,SAAS,CAACC,EAAG,EAAC,EACtE;UACEC,MAAM,EAAE,KAAK;UACbC,OAAO,EAAE;YACPC,aAAa,EAAE,SAAS,GAAGT;UAC7B;QACF,CAAC,CACF;;QAED;QACA;QACA;QACA;;QAEA,MAAMU,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,EAAE;;QAElC;QACA,IAAID,IAAI,CAACE,OAAO,CAACC,MAAM,KAAK,CAAC,EAAE;UAC7B,OAAO,IAAI;QACb;;QAEA;QACA,MAAMC,WAAW,GAAGJ,IAAI,CAACE,OAAO,CAACG,IAAI,CAACC,KAAK,IAAI;UAC7C,IAAIA,KAAK,CAACC,IAAI,KAAK,SAAS,EAAE;YAC5B,QAAQD,KAAK,CAACE,IAAI;cAChB,KAAK,SAAS;gBACZ,OAAOF,KAAK;cACd,KAAK,QAAQ;gBACX,OAAOA,KAAK;cACd;gBACE;YAAM;UAEZ;UACA,OAAO,IAAI;QACb,CAAC,CAAC;QACF;QACA,IAAIF,WAAW,EAAE;UACfpB,YAAY,CAACoB,WAAW,CAAC;;UAEzB;UACAtB,UAAU,CAAC,IAAI,CAAC;QAClB;MACF,CAAC,CAAC,OAAO2B,GAAG,EAAE;QACZ,OAAO,IAAI;MACb,CAAC,SAAS;QACR;QACA;QACArB,UAAU,CAAC,IAAI,CAAC;QAChBF,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAEDG,gBAAgB,EAAE;EACpB,CAAC,EAAE,CAACT,KAAK,CAACe,SAAS,CAACC,EAAE,CAAC,CAAC;EAExB,MAAMc,IAAI,GAAG;IACX;IACA;IACAC,UAAU,EAAE;MACVC,QAAQ,EAAE;IACZ;EACF,CAAC;;EAED;;EAEA,oBACEvC,KAAA,CAAAwC,aAAA;IAASC,SAAS,EAAErC,MAAM,CAACsC,OAAQ;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAEjChD,KAAA,CAAAwC,aAAA;IAAQL,IAAI,EAAC,QAAQ;IAAAQ,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,cAAY,CAAS,eAC3ChD,KAAA,CAAAwC,aAAA;IAAAG,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACEhD,KAAA,CAAAwC,aAAA;IAAAG,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAKzC,KAAK,CAACe,SAAS,CAAC2B,KAAK,CAAM,eAChCjD,KAAA,CAAAwC,aAAA;IAAAG,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,EAAS,EACRzC,KAAK,CAACe,SAAS,CAAC4B,IAAI,iBAAIlD,KAAA,CAAAwC,aAAA;IAAAG,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAI,gBAAc,EAACzC,KAAK,CAACe,SAAS,CAAC4B,IAAI,CAAM,eACtElD,KAAA,CAAAwC,aAAA;IAAAG,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAI,QAAM,EAACzC,KAAK,CAACe,SAAS,CAAC6B,IAAI,EAAC,KAAG,CAAK,eACxCnD,KAAA,CAAAwC,aAAA;IAAAG,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAIzC,KAAK,CAACe,SAAS,CAAC8B,QAAQ,CAAK,CAC7B,eACNpD,KAAA,CAAAwC,aAAA;IAAAG,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACGpC,SAAS,iBAAIZ,KAAA,CAAAwC,aAAA;IAAAG,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAG,YAAU,CAAI,EAC9BlC,OAAO,IAAI,CAACN,OAAO,iBAClBR,KAAA,CAAAwC,aAAA;IACEC,SAAS,EAAErC,MAAM,CAACiD,KAAM;IACxBC,GAAG;IACD;IACA;IACA/C,KAAK,CAACe,SAAS,CAACiC,QAAQ,CAACC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,GAC3CjD,KAAK,CAACe,SAAS,CAACmC,MAAM,GACtBlD,KAAK,CAACe,SAAS,CAACiC,QACrB;IACDG,GAAG,EAAEnD,KAAK,CAACe,SAAS,CAAC2B,KAAM;IAAAN,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,EAE9B,EACAlC,OAAO,IAAIN,OAAO,iBACjBR,KAAA,CAAAwC,aAAA,CAACrC,OAAO;IACNsC,SAAS,EAAErC,MAAM,CAACiD,KAAM;IACxBM,OAAO,EAAEjD,SAAS,CAACkD,GAAI;IACvBvB,IAAI,EAAEA,IAAK;IAAAM,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,EAEd,CACG,CACE;AAEd,CAAC;AAED,eAAe1C,WAAW"},"metadata":{},"sourceType":"module"}