{"ast":null,"code":"var parse = require('../parse/index.js');\nvar MILLISECONDS_IN_DAY = 24 * 60 * 60 * 1000;\n\n/**\n * @category Range Helpers\n * @summary Get the number of days that overlap in two date ranges\n *\n * @description\n * Get the number of days that overlap in two date ranges\n *\n * @param {Date|String|Number} initialRangeStartDate - the start of the initial range\n * @param {Date|String|Number} initialRangeEndDate - the end of the initial range\n * @param {Date|String|Number} comparedRangeStartDate - the start of the range to compare it with\n * @param {Date|String|Number} comparedRangeEndDate - the end of the range to compare it with\n * @returns {Number} the number of days that overlap in two date ranges\n * @throws {Error} startDate of a date range cannot be after its endDate\n *\n * @example\n * // For overlapping date ranges adds 1 for each started overlapping day:\n * getOverlappingDaysInRanges(\n *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 17), new Date(2014, 0, 21)\n * )\n * //=> 3\n *\n * @example\n * // For non-overlapping date ranges returns 0:\n * getOverlappingDaysInRanges(\n *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 21), new Date(2014, 0, 22)\n * )\n * //=> 0\n */\nfunction getOverlappingDaysInRanges(dirtyInitialRangeStartDate, dirtyInitialRangeEndDate, dirtyComparedRangeStartDate, dirtyComparedRangeEndDate) {\n  var initialStartTime = parse(dirtyInitialRangeStartDate).getTime();\n  var initialEndTime = parse(dirtyInitialRangeEndDate).getTime();\n  var comparedStartTime = parse(dirtyComparedRangeStartDate).getTime();\n  var comparedEndTime = parse(dirtyComparedRangeEndDate).getTime();\n  if (initialStartTime > initialEndTime || comparedStartTime > comparedEndTime) {\n    throw new Error('The start of the range cannot be after the end of the range');\n  }\n  var isOverlapping = initialStartTime < comparedEndTime && comparedStartTime < initialEndTime;\n  if (!isOverlapping) {\n    return 0;\n  }\n  var overlapStartDate = comparedStartTime < initialStartTime ? initialStartTime : comparedStartTime;\n  var overlapEndDate = comparedEndTime > initialEndTime ? initialEndTime : comparedEndTime;\n  var differenceInMs = overlapEndDate - overlapStartDate;\n  return Math.ceil(differenceInMs / MILLISECONDS_IN_DAY);\n}\nmodule.exports = getOverlappingDaysInRanges;","map":{"version":3,"names":["parse","require","MILLISECONDS_IN_DAY","getOverlappingDaysInRanges","dirtyInitialRangeStartDate","dirtyInitialRangeEndDate","dirtyComparedRangeStartDate","dirtyComparedRangeEndDate","initialStartTime","getTime","initialEndTime","comparedStartTime","comparedEndTime","Error","isOverlapping","overlapStartDate","overlapEndDate","differenceInMs","Math","ceil","module","exports"],"sources":["/Users/hore.11/github/movies/Frontend/node_modules/date-fns/get_overlapping_days_in_ranges/index.js"],"sourcesContent":["var parse = require('../parse/index.js')\n\nvar MILLISECONDS_IN_DAY = 24 * 60 * 60 * 1000\n\n/**\n * @category Range Helpers\n * @summary Get the number of days that overlap in two date ranges\n *\n * @description\n * Get the number of days that overlap in two date ranges\n *\n * @param {Date|String|Number} initialRangeStartDate - the start of the initial range\n * @param {Date|String|Number} initialRangeEndDate - the end of the initial range\n * @param {Date|String|Number} comparedRangeStartDate - the start of the range to compare it with\n * @param {Date|String|Number} comparedRangeEndDate - the end of the range to compare it with\n * @returns {Number} the number of days that overlap in two date ranges\n * @throws {Error} startDate of a date range cannot be after its endDate\n *\n * @example\n * // For overlapping date ranges adds 1 for each started overlapping day:\n * getOverlappingDaysInRanges(\n *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 17), new Date(2014, 0, 21)\n * )\n * //=> 3\n *\n * @example\n * // For non-overlapping date ranges returns 0:\n * getOverlappingDaysInRanges(\n *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 21), new Date(2014, 0, 22)\n * )\n * //=> 0\n */\nfunction getOverlappingDaysInRanges (dirtyInitialRangeStartDate, dirtyInitialRangeEndDate, dirtyComparedRangeStartDate, dirtyComparedRangeEndDate) {\n  var initialStartTime = parse(dirtyInitialRangeStartDate).getTime()\n  var initialEndTime = parse(dirtyInitialRangeEndDate).getTime()\n  var comparedStartTime = parse(dirtyComparedRangeStartDate).getTime()\n  var comparedEndTime = parse(dirtyComparedRangeEndDate).getTime()\n\n  if (initialStartTime > initialEndTime || comparedStartTime > comparedEndTime) {\n    throw new Error('The start of the range cannot be after the end of the range')\n  }\n\n  var isOverlapping = initialStartTime < comparedEndTime && comparedStartTime < initialEndTime\n\n  if (!isOverlapping) {\n    return 0\n  }\n\n  var overlapStartDate = comparedStartTime < initialStartTime\n    ? initialStartTime\n    : comparedStartTime\n\n  var overlapEndDate = comparedEndTime > initialEndTime\n    ? initialEndTime\n    : comparedEndTime\n\n  var differenceInMs = overlapEndDate - overlapStartDate\n\n  return Math.ceil(differenceInMs / MILLISECONDS_IN_DAY)\n}\n\nmodule.exports = getOverlappingDaysInRanges\n"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AAExC,IAAIC,mBAAmB,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,0BAA0BA,CAAEC,0BAA0B,EAAEC,wBAAwB,EAAEC,2BAA2B,EAAEC,yBAAyB,EAAE;EACjJ,IAAIC,gBAAgB,GAAGR,KAAK,CAACI,0BAA0B,CAAC,CAACK,OAAO,EAAE;EAClE,IAAIC,cAAc,GAAGV,KAAK,CAACK,wBAAwB,CAAC,CAACI,OAAO,EAAE;EAC9D,IAAIE,iBAAiB,GAAGX,KAAK,CAACM,2BAA2B,CAAC,CAACG,OAAO,EAAE;EACpE,IAAIG,eAAe,GAAGZ,KAAK,CAACO,yBAAyB,CAAC,CAACE,OAAO,EAAE;EAEhE,IAAID,gBAAgB,GAAGE,cAAc,IAAIC,iBAAiB,GAAGC,eAAe,EAAE;IAC5E,MAAM,IAAIC,KAAK,CAAC,6DAA6D,CAAC;EAChF;EAEA,IAAIC,aAAa,GAAGN,gBAAgB,GAAGI,eAAe,IAAID,iBAAiB,GAAGD,cAAc;EAE5F,IAAI,CAACI,aAAa,EAAE;IAClB,OAAO,CAAC;EACV;EAEA,IAAIC,gBAAgB,GAAGJ,iBAAiB,GAAGH,gBAAgB,GACvDA,gBAAgB,GAChBG,iBAAiB;EAErB,IAAIK,cAAc,GAAGJ,eAAe,GAAGF,cAAc,GACjDA,cAAc,GACdE,eAAe;EAEnB,IAAIK,cAAc,GAAGD,cAAc,GAAGD,gBAAgB;EAEtD,OAAOG,IAAI,CAACC,IAAI,CAACF,cAAc,GAAGf,mBAAmB,CAAC;AACxD;AAEAkB,MAAM,CAACC,OAAO,GAAGlB,0BAA0B"},"metadata":{},"sourceType":"script"}