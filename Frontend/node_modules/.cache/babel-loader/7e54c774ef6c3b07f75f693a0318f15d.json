{"ast":null,"code":"import { useState, useCallback } from 'react';\nconst useAPI = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [enteredBanner, setEnteredBanner] = useState(null);\n  const [errorBanner, setErrorBanner] = useState(false);\n  const [movies, setMovies] = useState({});\n  const [isError, setIsError] = useState({\n    fetchTrending: false,\n    fetchNetflixOriginals: false,\n    fetchTopRated: false,\n    fetchActionMovies: false,\n    fetchComedyMovies: false,\n    fetchHorrorMovies: false,\n    fetchRomanceMovies: false,\n    fetchDocumentaries: false\n  });\n  const API_KEY = '83000cd8936af060f3b23e85fc264318';\n\n  // hàm gọi API\n  const fetchMovies = useCallback(async keyword => {\n    const token = localStorage.getItem('token');\n    setIsLoading(true);\n    setErrorBanner(null);\n    setIsError({\n      fetchTrending: false,\n      fetchNetflixOriginals: false,\n      fetchTopRated: false,\n      fetchActionMovies: false,\n      fetchComedyMovies: false,\n      fetchHorrorMovies: false,\n      fetchRomanceMovies: false,\n      fetchDocumentaries: false\n    });\n    const requests = {\n      fetchTrending: `/movies/trending`,\n      fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n      fetchTopRated: `/movies/top-rate`,\n      fetchActionMovies: `/movies/discover?genre=28`,\n      fetchComedyMovies: `/movies/discover?genre=35`,\n      fetchHorrorMovies: `/movies/discover?genre=27`,\n      fetchRomanceMovies: `/movies/discover?genre=10749`,\n      fetchDocumentaries: `/movies/discover?genre=99`,\n      fetchSearch: `/search/movie?api_key=${API_KEY}&language=en-US`\n    };\n    try {\n      let url = `http://localhost:8080/api${requests[keyword]}`;\n      if (keyword === 'fetchNetflixOriginals') {\n        url = `https://api.themoviedb.org/3${requests[keyword]}`;\n      }\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          Authorization: 'Bearer ' + token\n        }\n      });\n      if (response.status === 400) {\n        const data = await response.json();\n        throw new Error(data.message);\n      }\n      if (response.status === 401) {\n        const data = await response.json();\n        return console.error(data.message);\n      }\n      if (!response.ok) {\n        throw new Error('Lỗi kết nối!');\n      }\n      const data = await response.json();\n\n      // Biến đổi dữ liệu nhận được từ API\n      const transformedMovie = data.results.map(movieData => {\n        return {\n          id: movieData.id,\n          title: movieData.title || movieData.name,\n          vote: movieData.vote_average,\n          date: movieData.release_date,\n          overview: movieData.overview,\n          poster: `https://image.tmdb.org/t/p/original${movieData.poster_path}`,\n          backdrop: `https://image.tmdb.org/t/p/original${movieData.backdrop_path}`\n        };\n      });\n      setMovies(prevMovies => ({\n        ...prevMovies,\n        [keyword]: transformedMovie\n      }));\n\n      ////////////////\n      // Phần code cho Banner\n\n      // Chọn ngẫu nhiên một phim có trong array đã gọi với keyword là fetchNetflixOriginals từ component Banner\n      const bannerMovieIndex = Math.floor(Math.random() * data.results.length);\n      const bannerMovie = data.results[bannerMovieIndex];\n      const transformedMovieBanner = {\n        id: bannerMovie.id,\n        title: bannerMovie.title || bannerMovie.name,\n        overview: bannerMovie.overview.split(' ').slice(0, 26).join(' '),\n        backdrop: `https://image.tmdb.org/t/p/original${bannerMovie.backdrop_path}`\n      };\n      setEnteredBanner(transformedMovieBanner);\n\n      ////////////////\n    } catch (err) {\n      console.log(err.message);\n      setErrorBanner(err.message || 'Đã xẫy ra lỗi!');\n\n      // nhập vào các lỗi đúng theo key từng thể loại.\n      setIsError(prevError => ({\n        ...prevError,\n        [keyword]: err.message || 'Đã xẫy ra lỗi!'\n      }));\n    }\n    setIsLoading(false);\n  }, []);\n  return {\n    movies,\n    enteredBanner,\n    isLoading,\n    errorBanner,\n    isError,\n    fetchMovies\n  };\n};\nexport default useAPI;","map":{"version":3,"names":["useState","useCallback","useAPI","isLoading","setIsLoading","enteredBanner","setEnteredBanner","errorBanner","setErrorBanner","movies","setMovies","isError","setIsError","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","API_KEY","fetchMovies","keyword","token","localStorage","getItem","requests","fetchSearch","url","response","fetch","method","headers","Authorization","status","data","json","Error","message","console","error","ok","transformedMovie","results","map","movieData","id","title","name","vote","vote_average","date","release_date","overview","poster","poster_path","backdrop","backdrop_path","prevMovies","bannerMovieIndex","Math","floor","random","length","bannerMovie","transformedMovieBanner","split","slice","join","err","log","prevError"],"sources":["/Users/hore.11/github/movies/Frontend/src/hooks/useAPI.jsx"],"sourcesContent":["import { useState, useCallback } from 'react';\n\nconst useAPI = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [enteredBanner, setEnteredBanner] = useState(null);\n  const [errorBanner, setErrorBanner] = useState(false);\n  const [movies, setMovies] = useState({});\n\n  const [isError, setIsError] = useState({\n    fetchTrending: false,\n    fetchNetflixOriginals: false,\n    fetchTopRated: false,\n    fetchActionMovies: false,\n    fetchComedyMovies: false,\n    fetchHorrorMovies: false,\n    fetchRomanceMovies: false,\n    fetchDocumentaries: false,\n  });\n\n  const API_KEY = '83000cd8936af060f3b23e85fc264318';\n\n  // hàm gọi API\n  const fetchMovies = useCallback(async keyword => {\n    const token = localStorage.getItem('token');\n    setIsLoading(true);\n    setErrorBanner(null);\n    setIsError({\n      fetchTrending: false,\n      fetchNetflixOriginals: false,\n      fetchTopRated: false,\n      fetchActionMovies: false,\n      fetchComedyMovies: false,\n      fetchHorrorMovies: false,\n      fetchRomanceMovies: false,\n      fetchDocumentaries: false,\n    });\n\n    const requests = {\n      fetchTrending: `/movies/trending`,\n      fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n      fetchTopRated: `/movies/top-rate`,\n      fetchActionMovies: `/movies/discover?genre=28`,\n      fetchComedyMovies: `/movies/discover?genre=35`,\n      fetchHorrorMovies: `/movies/discover?genre=27`,\n      fetchRomanceMovies: `/movies/discover?genre=10749`,\n      fetchDocumentaries: `/movies/discover?genre=99`,\n      fetchSearch: `/search/movie?api_key=${API_KEY}&language=en-US`,\n    };\n\n    try {\n      let url = `http://localhost:8080/api${requests[keyword]}`;\n\n      if (keyword === 'fetchNetflixOriginals') {\n        url = `https://api.themoviedb.org/3${requests[keyword]}`;\n      }\n\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          Authorization: 'Bearer ' + token,\n        },\n      });\n\n      if (response.status === 400) {\n        const data = await response.json();\n        throw new Error(data.message);\n      }\n\n      if (response.status === 401) {\n        const data = await response.json();\n        return console.error(data.message);\n      }\n\n      if (!response.ok) {\n        throw new Error('Lỗi kết nối!');\n      }\n\n      const data = await response.json();\n\n      // Biến đổi dữ liệu nhận được từ API\n      const transformedMovie = data.results.map(movieData => {\n        return {\n          id: movieData.id,\n          title: movieData.title || movieData.name,\n          vote: movieData.vote_average,\n          date: movieData.release_date,\n          overview: movieData.overview,\n          poster: `https://image.tmdb.org/t/p/original${movieData.poster_path}`,\n          backdrop: `https://image.tmdb.org/t/p/original${movieData.backdrop_path}`,\n        };\n      });\n\n      setMovies(prevMovies => ({\n        ...prevMovies,\n        [keyword]: transformedMovie,\n      }));\n\n      ////////////////\n      // Phần code cho Banner\n\n      // Chọn ngẫu nhiên một phim có trong array đã gọi với keyword là fetchNetflixOriginals từ component Banner\n      const bannerMovieIndex = Math.floor(Math.random() * data.results.length);\n      const bannerMovie = data.results[bannerMovieIndex];\n      const transformedMovieBanner = {\n        id: bannerMovie.id,\n        title: bannerMovie.title || bannerMovie.name,\n        overview: bannerMovie.overview.split(' ').slice(0, 26).join(' '),\n        backdrop: `https://image.tmdb.org/t/p/original${bannerMovie.backdrop_path}`,\n      };\n      setEnteredBanner(transformedMovieBanner);\n\n      ////////////////\n    } catch (err) {\n      console.log(err.message);\n      setErrorBanner(err.message || 'Đã xẫy ra lỗi!');\n\n      // nhập vào các lỗi đúng theo key từng thể loại.\n      setIsError(prevError => ({\n        ...prevError,\n        [keyword]: err.message || 'Đã xẫy ra lỗi!',\n      }));\n    }\n    setIsLoading(false);\n  }, []);\n\n  return {\n    movies,\n    enteredBanner,\n    isLoading,\n    errorBanner,\n    isError,\n    fetchMovies,\n  };\n};\n\nexport default useAPI;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}