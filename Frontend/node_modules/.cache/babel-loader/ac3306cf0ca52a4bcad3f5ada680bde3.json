{"ast":null,"code":"var compareDesc = require('../compare_desc/index.js');\nvar parse = require('../parse/index.js');\nvar differenceInSeconds = require('../difference_in_seconds/index.js');\nvar differenceInMonths = require('../difference_in_months/index.js');\nvar enLocale = require('../locale/en/index.js');\nvar MINUTES_IN_DAY = 1440;\nvar MINUTES_IN_ALMOST_TWO_DAYS = 2520;\nvar MINUTES_IN_MONTH = 43200;\nvar MINUTES_IN_TWO_MONTHS = 86400;\n\n/**\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words.\n *\n * | Distance between dates                                            | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance between dates | Result               |\n * |------------------------|----------------------|\n * | 0 secs ... 5 secs      | less than 5 seconds  |\n * | 5 secs ... 10 secs     | less than 10 seconds |\n * | 10 secs ... 20 secs    | less than 20 seconds |\n * | 20 secs ... 40 secs    | half a minute        |\n * | 40 secs ... 60 secs    | less than a minute   |\n * | 60 secs ... 90 secs    | 1 minute             |\n *\n * @param {Date|String|Number} dateToCompare - the date to compare with\n * @param {Date|String|Number} date - the other date\n * @param {Object} [options] - the object with options\n * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\n * @param {Object} [options.locale=enLocale] - the locale object\n * @returns {String} the distance in words\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * var result = distanceInWords(\n *   new Date(2014, 6, 2),\n *   new Date(2015, 0, 1)\n * )\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00, including seconds?\n * var result = distanceInWords(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0),\n *   {includeSeconds: true}\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * var result = distanceInWords(\n *   new Date(2016, 0, 1),\n *   new Date(2015, 0, 1),\n *   {addSuffix: true}\n * )\n * //=> 'about 1 year ago'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * var eoLocale = require('date-fns/locale/eo')\n * var result = distanceInWords(\n *   new Date(2016, 7, 1),\n *   new Date(2015, 0, 1),\n *   {locale: eoLocale}\n * )\n * //=> 'pli ol 1 jaro'\n */\nfunction distanceInWords(dirtyDateToCompare, dirtyDate, dirtyOptions) {\n  var options = dirtyOptions || {};\n  var comparison = compareDesc(dirtyDateToCompare, dirtyDate);\n  var locale = options.locale;\n  var localize = enLocale.distanceInWords.localize;\n  if (locale && locale.distanceInWords && locale.distanceInWords.localize) {\n    localize = locale.distanceInWords.localize;\n  }\n  var localizeOptions = {\n    addSuffix: Boolean(options.addSuffix),\n    comparison: comparison\n  };\n  var dateLeft, dateRight;\n  if (comparison > 0) {\n    dateLeft = parse(dirtyDateToCompare);\n    dateRight = parse(dirtyDate);\n  } else {\n    dateLeft = parse(dirtyDate);\n    dateRight = parse(dirtyDateToCompare);\n  }\n  var seconds = differenceInSeconds(dateRight, dateLeft);\n  var offset = dateRight.getTimezoneOffset() - dateLeft.getTimezoneOffset();\n  var minutes = Math.round(seconds / 60) - offset;\n  var months;\n\n  // 0 up to 2 mins\n  if (minutes < 2) {\n    if (options.includeSeconds) {\n      if (seconds < 5) {\n        return localize('lessThanXSeconds', 5, localizeOptions);\n      } else if (seconds < 10) {\n        return localize('lessThanXSeconds', 10, localizeOptions);\n      } else if (seconds < 20) {\n        return localize('lessThanXSeconds', 20, localizeOptions);\n      } else if (seconds < 40) {\n        return localize('halfAMinute', null, localizeOptions);\n      } else if (seconds < 60) {\n        return localize('lessThanXMinutes', 1, localizeOptions);\n      } else {\n        return localize('xMinutes', 1, localizeOptions);\n      }\n    } else {\n      if (minutes === 0) {\n        return localize('lessThanXMinutes', 1, localizeOptions);\n      } else {\n        return localize('xMinutes', minutes, localizeOptions);\n      }\n    }\n\n    // 2 mins up to 0.75 hrs\n  } else if (minutes < 45) {\n    return localize('xMinutes', minutes, localizeOptions);\n\n    // 0.75 hrs up to 1.5 hrs\n  } else if (minutes < 90) {\n    return localize('aboutXHours', 1, localizeOptions);\n\n    // 1.5 hrs up to 24 hrs\n  } else if (minutes < MINUTES_IN_DAY) {\n    var hours = Math.round(minutes / 60);\n    return localize('aboutXHours', hours, localizeOptions);\n\n    // 1 day up to 1.75 days\n  } else if (minutes < MINUTES_IN_ALMOST_TWO_DAYS) {\n    return localize('xDays', 1, localizeOptions);\n\n    // 1.75 days up to 30 days\n  } else if (minutes < MINUTES_IN_MONTH) {\n    var days = Math.round(minutes / MINUTES_IN_DAY);\n    return localize('xDays', days, localizeOptions);\n\n    // 1 month up to 2 months\n  } else if (minutes < MINUTES_IN_TWO_MONTHS) {\n    months = Math.round(minutes / MINUTES_IN_MONTH);\n    return localize('aboutXMonths', months, localizeOptions);\n  }\n  months = differenceInMonths(dateRight, dateLeft);\n\n  // 2 months up to 12 months\n  if (months < 12) {\n    var nearestMonth = Math.round(minutes / MINUTES_IN_MONTH);\n    return localize('xMonths', nearestMonth, localizeOptions);\n\n    // 1 year up to max Date\n  } else {\n    var monthsSinceStartOfYear = months % 12;\n    var years = Math.floor(months / 12);\n\n    // N years up to 1 years 3 months\n    if (monthsSinceStartOfYear < 3) {\n      return localize('aboutXYears', years, localizeOptions);\n\n      // N years 3 months up to N years 9 months\n    } else if (monthsSinceStartOfYear < 9) {\n      return localize('overXYears', years, localizeOptions);\n\n      // N years 9 months up to N year 12 months\n    } else {\n      return localize('almostXYears', years + 1, localizeOptions);\n    }\n  }\n}\nmodule.exports = distanceInWords;","map":{"version":3,"names":["compareDesc","require","parse","differenceInSeconds","differenceInMonths","enLocale","MINUTES_IN_DAY","MINUTES_IN_ALMOST_TWO_DAYS","MINUTES_IN_MONTH","MINUTES_IN_TWO_MONTHS","distanceInWords","dirtyDateToCompare","dirtyDate","dirtyOptions","options","comparison","locale","localize","localizeOptions","addSuffix","Boolean","dateLeft","dateRight","seconds","offset","getTimezoneOffset","minutes","Math","round","months","includeSeconds","hours","days","nearestMonth","monthsSinceStartOfYear","years","floor","module","exports"],"sources":["/Users/hore.11/github/movies/Frontend/node_modules/date-fns/distance_in_words/index.js"],"sourcesContent":["var compareDesc = require('../compare_desc/index.js')\nvar parse = require('../parse/index.js')\nvar differenceInSeconds = require('../difference_in_seconds/index.js')\nvar differenceInMonths = require('../difference_in_months/index.js')\nvar enLocale = require('../locale/en/index.js')\n\nvar MINUTES_IN_DAY = 1440\nvar MINUTES_IN_ALMOST_TWO_DAYS = 2520\nvar MINUTES_IN_MONTH = 43200\nvar MINUTES_IN_TWO_MONTHS = 86400\n\n/**\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words.\n *\n * | Distance between dates                                            | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance between dates | Result               |\n * |------------------------|----------------------|\n * | 0 secs ... 5 secs      | less than 5 seconds  |\n * | 5 secs ... 10 secs     | less than 10 seconds |\n * | 10 secs ... 20 secs    | less than 20 seconds |\n * | 20 secs ... 40 secs    | half a minute        |\n * | 40 secs ... 60 secs    | less than a minute   |\n * | 60 secs ... 90 secs    | 1 minute             |\n *\n * @param {Date|String|Number} dateToCompare - the date to compare with\n * @param {Date|String|Number} date - the other date\n * @param {Object} [options] - the object with options\n * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\n * @param {Object} [options.locale=enLocale] - the locale object\n * @returns {String} the distance in words\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * var result = distanceInWords(\n *   new Date(2014, 6, 2),\n *   new Date(2015, 0, 1)\n * )\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00, including seconds?\n * var result = distanceInWords(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0),\n *   {includeSeconds: true}\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * var result = distanceInWords(\n *   new Date(2016, 0, 1),\n *   new Date(2015, 0, 1),\n *   {addSuffix: true}\n * )\n * //=> 'about 1 year ago'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * var eoLocale = require('date-fns/locale/eo')\n * var result = distanceInWords(\n *   new Date(2016, 7, 1),\n *   new Date(2015, 0, 1),\n *   {locale: eoLocale}\n * )\n * //=> 'pli ol 1 jaro'\n */\nfunction distanceInWords (dirtyDateToCompare, dirtyDate, dirtyOptions) {\n  var options = dirtyOptions || {}\n\n  var comparison = compareDesc(dirtyDateToCompare, dirtyDate)\n\n  var locale = options.locale\n  var localize = enLocale.distanceInWords.localize\n  if (locale && locale.distanceInWords && locale.distanceInWords.localize) {\n    localize = locale.distanceInWords.localize\n  }\n\n  var localizeOptions = {\n    addSuffix: Boolean(options.addSuffix),\n    comparison: comparison\n  }\n\n  var dateLeft, dateRight\n  if (comparison > 0) {\n    dateLeft = parse(dirtyDateToCompare)\n    dateRight = parse(dirtyDate)\n  } else {\n    dateLeft = parse(dirtyDate)\n    dateRight = parse(dirtyDateToCompare)\n  }\n\n  var seconds = differenceInSeconds(dateRight, dateLeft)\n  var offset = dateRight.getTimezoneOffset() - dateLeft.getTimezoneOffset()\n  var minutes = Math.round(seconds / 60) - offset\n  var months\n\n  // 0 up to 2 mins\n  if (minutes < 2) {\n    if (options.includeSeconds) {\n      if (seconds < 5) {\n        return localize('lessThanXSeconds', 5, localizeOptions)\n      } else if (seconds < 10) {\n        return localize('lessThanXSeconds', 10, localizeOptions)\n      } else if (seconds < 20) {\n        return localize('lessThanXSeconds', 20, localizeOptions)\n      } else if (seconds < 40) {\n        return localize('halfAMinute', null, localizeOptions)\n      } else if (seconds < 60) {\n        return localize('lessThanXMinutes', 1, localizeOptions)\n      } else {\n        return localize('xMinutes', 1, localizeOptions)\n      }\n    } else {\n      if (minutes === 0) {\n        return localize('lessThanXMinutes', 1, localizeOptions)\n      } else {\n        return localize('xMinutes', minutes, localizeOptions)\n      }\n    }\n\n  // 2 mins up to 0.75 hrs\n  } else if (minutes < 45) {\n    return localize('xMinutes', minutes, localizeOptions)\n\n  // 0.75 hrs up to 1.5 hrs\n  } else if (minutes < 90) {\n    return localize('aboutXHours', 1, localizeOptions)\n\n  // 1.5 hrs up to 24 hrs\n  } else if (minutes < MINUTES_IN_DAY) {\n    var hours = Math.round(minutes / 60)\n    return localize('aboutXHours', hours, localizeOptions)\n\n  // 1 day up to 1.75 days\n  } else if (minutes < MINUTES_IN_ALMOST_TWO_DAYS) {\n    return localize('xDays', 1, localizeOptions)\n\n  // 1.75 days up to 30 days\n  } else if (minutes < MINUTES_IN_MONTH) {\n    var days = Math.round(minutes / MINUTES_IN_DAY)\n    return localize('xDays', days, localizeOptions)\n\n  // 1 month up to 2 months\n  } else if (minutes < MINUTES_IN_TWO_MONTHS) {\n    months = Math.round(minutes / MINUTES_IN_MONTH)\n    return localize('aboutXMonths', months, localizeOptions)\n  }\n\n  months = differenceInMonths(dateRight, dateLeft)\n\n  // 2 months up to 12 months\n  if (months < 12) {\n    var nearestMonth = Math.round(minutes / MINUTES_IN_MONTH)\n    return localize('xMonths', nearestMonth, localizeOptions)\n\n  // 1 year up to max Date\n  } else {\n    var monthsSinceStartOfYear = months % 12\n    var years = Math.floor(months / 12)\n\n    // N years up to 1 years 3 months\n    if (monthsSinceStartOfYear < 3) {\n      return localize('aboutXYears', years, localizeOptions)\n\n    // N years 3 months up to N years 9 months\n    } else if (monthsSinceStartOfYear < 9) {\n      return localize('overXYears', years, localizeOptions)\n\n    // N years 9 months up to N year 12 months\n    } else {\n      return localize('almostXYears', years + 1, localizeOptions)\n    }\n  }\n}\n\nmodule.exports = distanceInWords\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}