{"ast":null,"code":"var compareDesc = require('../compare_desc/index.js');\nvar parse = require('../parse/index.js');\nvar differenceInSeconds = require('../difference_in_seconds/index.js');\nvar enLocale = require('../locale/en/index.js');\nvar MINUTES_IN_DAY = 1440;\nvar MINUTES_IN_MONTH = 43200;\nvar MINUTES_IN_YEAR = 525600;\n\n/**\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words, using strict units.\n * This is like `distanceInWords`, but does not use helpers like 'almost', 'over',\n * 'less than' and the like.\n *\n * | Distance between dates | Result              |\n * |------------------------|---------------------|\n * | 0 ... 59 secs          | [0..59] seconds     |\n * | 1 ... 59 mins          | [1..59] minutes     |\n * | 1 ... 23 hrs           | [1..23] hours       |\n * | 1 ... 29 days          | [1..29] days        |\n * | 1 ... 11 months        | [1..11] months      |\n * | 1 ... N years          | [1..N]  years       |\n *\n * @param {Date|String|Number} dateToCompare - the date to compare with\n * @param {Date|String|Number} date - the other date\n * @param {Object} [options] - the object with options\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\n * @param {'s'|'m'|'h'|'d'|'M'|'Y'} [options.unit] - if specified, will force a unit\n * @param {'floor'|'ceil'|'round'} [options.partialMethod='floor'] - which way to round partial units\n * @param {Object} [options.locale=enLocale] - the locale object\n * @returns {String} the distance in words\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * var result = distanceInWordsStrict(\n *   new Date(2014, 6, 2),\n *   new Date(2015, 0, 2)\n * )\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00?\n * var result = distanceInWordsStrict(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0),\n * )\n * //=> '15 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * var result = distanceInWordsStrict(\n *   new Date(2016, 0, 1),\n *   new Date(2015, 0, 1),\n *   {addSuffix: true}\n * )\n * //=> '1 year ago'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, in minutes?\n * var result = distanceInWordsStrict(\n *   new Date(2016, 0, 1),\n *   new Date(2015, 0, 1),\n *   {unit: 'm'}\n * )\n * //=> '525600 minutes'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 28 January 2015, in months, rounded up?\n * var result = distanceInWordsStrict(\n *   new Date(2015, 0, 28),\n *   new Date(2015, 0, 1),\n *   {unit: 'M', partialMethod: 'ceil'}\n * )\n * //=> '1 month'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * var eoLocale = require('date-fns/locale/eo')\n * var result = distanceInWordsStrict(\n *   new Date(2016, 7, 1),\n *   new Date(2015, 0, 1),\n *   {locale: eoLocale}\n * )\n * //=> '1 jaro'\n */\nfunction distanceInWordsStrict(dirtyDateToCompare, dirtyDate, dirtyOptions) {\n  var options = dirtyOptions || {};\n  var comparison = compareDesc(dirtyDateToCompare, dirtyDate);\n  var locale = options.locale;\n  var localize = enLocale.distanceInWords.localize;\n  if (locale && locale.distanceInWords && locale.distanceInWords.localize) {\n    localize = locale.distanceInWords.localize;\n  }\n  var localizeOptions = {\n    addSuffix: Boolean(options.addSuffix),\n    comparison: comparison\n  };\n  var dateLeft, dateRight;\n  if (comparison > 0) {\n    dateLeft = parse(dirtyDateToCompare);\n    dateRight = parse(dirtyDate);\n  } else {\n    dateLeft = parse(dirtyDate);\n    dateRight = parse(dirtyDateToCompare);\n  }\n  var unit;\n  var mathPartial = Math[options.partialMethod ? String(options.partialMethod) : 'floor'];\n  var seconds = differenceInSeconds(dateRight, dateLeft);\n  var offset = dateRight.getTimezoneOffset() - dateLeft.getTimezoneOffset();\n  var minutes = mathPartial(seconds / 60) - offset;\n  var hours, days, months, years;\n  if (options.unit) {\n    unit = String(options.unit);\n  } else {\n    if (minutes < 1) {\n      unit = 's';\n    } else if (minutes < 60) {\n      unit = 'm';\n    } else if (minutes < MINUTES_IN_DAY) {\n      unit = 'h';\n    } else if (minutes < MINUTES_IN_MONTH) {\n      unit = 'd';\n    } else if (minutes < MINUTES_IN_YEAR) {\n      unit = 'M';\n    } else {\n      unit = 'Y';\n    }\n  }\n\n  // 0 up to 60 seconds\n  if (unit === 's') {\n    return localize('xSeconds', seconds, localizeOptions);\n\n    // 1 up to 60 mins\n  } else if (unit === 'm') {\n    return localize('xMinutes', minutes, localizeOptions);\n\n    // 1 up to 24 hours\n  } else if (unit === 'h') {\n    hours = mathPartial(minutes / 60);\n    return localize('xHours', hours, localizeOptions);\n\n    // 1 up to 30 days\n  } else if (unit === 'd') {\n    days = mathPartial(minutes / MINUTES_IN_DAY);\n    return localize('xDays', days, localizeOptions);\n\n    // 1 up to 12 months\n  } else if (unit === 'M') {\n    months = mathPartial(minutes / MINUTES_IN_MONTH);\n    return localize('xMonths', months, localizeOptions);\n\n    // 1 year up to max Date\n  } else if (unit === 'Y') {\n    years = mathPartial(minutes / MINUTES_IN_YEAR);\n    return localize('xYears', years, localizeOptions);\n  }\n  throw new Error('Unknown unit: ' + unit);\n}\nmodule.exports = distanceInWordsStrict;","map":{"version":3,"names":["compareDesc","require","parse","differenceInSeconds","enLocale","MINUTES_IN_DAY","MINUTES_IN_MONTH","MINUTES_IN_YEAR","distanceInWordsStrict","dirtyDateToCompare","dirtyDate","dirtyOptions","options","comparison","locale","localize","distanceInWords","localizeOptions","addSuffix","Boolean","dateLeft","dateRight","unit","mathPartial","Math","partialMethod","String","seconds","offset","getTimezoneOffset","minutes","hours","days","months","years","Error","module","exports"],"sources":["/Users/hore.11/github/movies/Frontend/node_modules/date-fns/distance_in_words_strict/index.js"],"sourcesContent":["var compareDesc = require('../compare_desc/index.js')\nvar parse = require('../parse/index.js')\nvar differenceInSeconds = require('../difference_in_seconds/index.js')\nvar enLocale = require('../locale/en/index.js')\n\nvar MINUTES_IN_DAY = 1440\nvar MINUTES_IN_MONTH = 43200\nvar MINUTES_IN_YEAR = 525600\n\n/**\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words, using strict units.\n * This is like `distanceInWords`, but does not use helpers like 'almost', 'over',\n * 'less than' and the like.\n *\n * | Distance between dates | Result              |\n * |------------------------|---------------------|\n * | 0 ... 59 secs          | [0..59] seconds     |\n * | 1 ... 59 mins          | [1..59] minutes     |\n * | 1 ... 23 hrs           | [1..23] hours       |\n * | 1 ... 29 days          | [1..29] days        |\n * | 1 ... 11 months        | [1..11] months      |\n * | 1 ... N years          | [1..N]  years       |\n *\n * @param {Date|String|Number} dateToCompare - the date to compare with\n * @param {Date|String|Number} date - the other date\n * @param {Object} [options] - the object with options\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\n * @param {'s'|'m'|'h'|'d'|'M'|'Y'} [options.unit] - if specified, will force a unit\n * @param {'floor'|'ceil'|'round'} [options.partialMethod='floor'] - which way to round partial units\n * @param {Object} [options.locale=enLocale] - the locale object\n * @returns {String} the distance in words\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * var result = distanceInWordsStrict(\n *   new Date(2014, 6, 2),\n *   new Date(2015, 0, 2)\n * )\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00?\n * var result = distanceInWordsStrict(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0),\n * )\n * //=> '15 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * var result = distanceInWordsStrict(\n *   new Date(2016, 0, 1),\n *   new Date(2015, 0, 1),\n *   {addSuffix: true}\n * )\n * //=> '1 year ago'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, in minutes?\n * var result = distanceInWordsStrict(\n *   new Date(2016, 0, 1),\n *   new Date(2015, 0, 1),\n *   {unit: 'm'}\n * )\n * //=> '525600 minutes'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 28 January 2015, in months, rounded up?\n * var result = distanceInWordsStrict(\n *   new Date(2015, 0, 28),\n *   new Date(2015, 0, 1),\n *   {unit: 'M', partialMethod: 'ceil'}\n * )\n * //=> '1 month'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * var eoLocale = require('date-fns/locale/eo')\n * var result = distanceInWordsStrict(\n *   new Date(2016, 7, 1),\n *   new Date(2015, 0, 1),\n *   {locale: eoLocale}\n * )\n * //=> '1 jaro'\n */\nfunction distanceInWordsStrict (dirtyDateToCompare, dirtyDate, dirtyOptions) {\n  var options = dirtyOptions || {}\n\n  var comparison = compareDesc(dirtyDateToCompare, dirtyDate)\n\n  var locale = options.locale\n  var localize = enLocale.distanceInWords.localize\n  if (locale && locale.distanceInWords && locale.distanceInWords.localize) {\n    localize = locale.distanceInWords.localize\n  }\n\n  var localizeOptions = {\n    addSuffix: Boolean(options.addSuffix),\n    comparison: comparison\n  }\n\n  var dateLeft, dateRight\n  if (comparison > 0) {\n    dateLeft = parse(dirtyDateToCompare)\n    dateRight = parse(dirtyDate)\n  } else {\n    dateLeft = parse(dirtyDate)\n    dateRight = parse(dirtyDateToCompare)\n  }\n\n  var unit\n  var mathPartial = Math[options.partialMethod ? String(options.partialMethod) : 'floor']\n  var seconds = differenceInSeconds(dateRight, dateLeft)\n  var offset = dateRight.getTimezoneOffset() - dateLeft.getTimezoneOffset()\n  var minutes = mathPartial(seconds / 60) - offset\n  var hours, days, months, years\n\n  if (options.unit) {\n    unit = String(options.unit)\n  } else {\n    if (minutes < 1) {\n      unit = 's'\n    } else if (minutes < 60) {\n      unit = 'm'\n    } else if (minutes < MINUTES_IN_DAY) {\n      unit = 'h'\n    } else if (minutes < MINUTES_IN_MONTH) {\n      unit = 'd'\n    } else if (minutes < MINUTES_IN_YEAR) {\n      unit = 'M'\n    } else {\n      unit = 'Y'\n    }\n  }\n\n  // 0 up to 60 seconds\n  if (unit === 's') {\n    return localize('xSeconds', seconds, localizeOptions)\n\n  // 1 up to 60 mins\n  } else if (unit === 'm') {\n    return localize('xMinutes', minutes, localizeOptions)\n\n  // 1 up to 24 hours\n  } else if (unit === 'h') {\n    hours = mathPartial(minutes / 60)\n    return localize('xHours', hours, localizeOptions)\n\n  // 1 up to 30 days\n  } else if (unit === 'd') {\n    days = mathPartial(minutes / MINUTES_IN_DAY)\n    return localize('xDays', days, localizeOptions)\n\n  // 1 up to 12 months\n  } else if (unit === 'M') {\n    months = mathPartial(minutes / MINUTES_IN_MONTH)\n    return localize('xMonths', months, localizeOptions)\n\n  // 1 year up to max Date\n  } else if (unit === 'Y') {\n    years = mathPartial(minutes / MINUTES_IN_YEAR)\n    return localize('xYears', years, localizeOptions)\n  }\n\n  throw new Error('Unknown unit: ' + unit)\n}\n\nmodule.exports = distanceInWordsStrict\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}